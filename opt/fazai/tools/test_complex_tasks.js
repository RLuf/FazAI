#!/usr/bin/env node

/**
 * FazAI - Teste de Tarefas Complexas
 * Autor: Roger Luft
 * Vers√£o: 1.0
 * 
 * Este script demonstra as funcionalidades do m√≥dulo de tarefas complexas
 */

const { ComplexTasksManager } = require('../lib/complex_tasks');
const { MCPOPNsense } = require('../lib/mcp_opnsense.js');

// Configura√ß√£o de teste
const TEST_CONFIG = {
    port: 8081, // Porta diferente para n√£o conflitar
    host: '127.0.0.1',
    staticDir: '/tmp/fazai_test/static',
    chartsDir: '/tmp/fazai_test/charts',
    dataDir: '/tmp/fazai_test/data'
};

async function testComplexTasks() {
    console.log('üöÄ Iniciando teste de tarefas complexas...\n');

    try {
        // 1. Inicializar Complex Tasks Manager
        console.log('üìä Inicializando Complex Tasks Manager...');
        const manager = new ComplexTasksManager(TEST_CONFIG);
        
        // 2. Inicializar servidor HTTP
        console.log('üåê Iniciando servidor HTTP...');
        await manager.initializeServer();
        console.log(`‚úÖ Servidor iniciado em http://${TEST_CONFIG.host}:${TEST_CONFIG.port}\n`);

        // 3. Testar gera√ß√£o de gr√°ficos
        console.log('üìà Testando gera√ß√£o de gr√°ficos...');
        
        // Gr√°fico de linha
        const lineChart = await manager.executeTask('generate_chart', {
            type: 'line',
            title: 'Vendas Mensais 2024',
            xLabel: 'M√™s',
            yLabel: 'Vendas (milhares)',
            data: {
                labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
                datasets: [{
                    label: 'Vendas',
                    data: [12, 19, 3, 5, 2, 3]
                }]
            }
        });
        console.log(`‚úÖ Gr√°fico de linha criado: ${lineChart.result.chartId}`);

        // Gr√°fico de barras
        const barChart = await manager.executeTask('generate_chart', {
            type: 'bar',
            title: 'Produtos Mais Vendidos',
            xLabel: 'Produto',
            yLabel: 'Quantidade',
            data: {
                labels: ['Produto A', 'Produto B', 'Produto C', 'Produto D'],
                datasets: [{
                    label: 'Vendas',
                    data: [45, 32, 28, 15]
                }]
            }
        });
        console.log(`‚úÖ Gr√°fico de barras criado: ${barChart.result.chartId}`);

        // 4. Testar publica√ß√£o de gr√°ficos
        console.log('\nüì§ Testando publica√ß√£o de gr√°ficos...');
        
        const publishResult = await manager.executeTask('publish_chart', {
            chartId: lineChart.result.chartId,
            publishType: 'web',
            destination: 'https://exemplo.com/charts'
        });
        console.log(`‚úÖ Gr√°fico publicado: ${JSON.stringify(publishResult)}`);

        // 5. Testar extra√ß√£o de dados
        console.log('\nüìä Testando extra√ß√£o de dados...');
        
        const dataResult = await manager.executeTask('extract_data', {
            source: 'https://jsonplaceholder.typicode.com/posts/1',
            format: 'json',
            outputFormat: 'json'
        });
        console.log(`‚úÖ Dados extra√≠dos: ${dataResult.result.dataId}`);

        // 6. Testar cria√ß√£o de dashboard
        console.log('\nüéõÔ∏è Testando cria√ß√£o de dashboard...');
        
        const dashboardResult = await manager.executeTask('create_dashboard', {
            title: 'Dashboard de Vendas',
            charts: [lineChart.result.chartId, barChart.result.chartId],
            layout: 'grid',
            theme: 'modern'
        });
        console.log(`‚úÖ Dashboard criado: ${dashboardResult.result.dashboardId}`);

        // 7. Testar monitoramento do sistema
        console.log('\nüìä Testando monitoramento do sistema...');
        
        const monitoringResult = await manager.executeTask('monitor_system', {
            metrics: ['cpu', 'memory', 'disk'],
            interval: 5,
            duration: 30
        });
        console.log(`‚úÖ Monitoramento iniciado: ${monitoringResult.result.monitoringId}`);

        // 8. Testar gera√ß√£o de relat√≥rio
        console.log('\nüìã Testando gera√ß√£o de relat√≥rio...');
        
        const reportResult = await manager.executeTask('generate_report', {
            type: 'system_status',
            data: { status: 'operational', uptime: '24h' },
            outputFormat: 'json'
        });
        console.log(`‚úÖ Relat√≥rio gerado: ${reportResult.result.reportFile}`);

        // 9. Listar todos os gr√°ficos criados
        console.log('\nüìã Listando gr√°ficos criados...');
        const charts = Array.from(manager.charts.values());
        charts.forEach(chart => {
            console.log(`  - ${chart.id}: ${chart.title} (${chart.type})`);
        });

        // 10. Listar todas as fontes de dados
        console.log('\nüìä Listando fontes de dados...');
        const dataSources = Array.from(manager.dataSources.values());
        dataSources.forEach(source => {
            console.log(`  - ${source.id}: ${source.source} (${source.outputFormat})`);
        });

        // 11. Testar APIs REST
        console.log('\nüåê Testando APIs REST...');
        
        // Listar gr√°ficos via API
        const chartsResponse = await fetch(`http://${TEST_CONFIG.host}:${TEST_CONFIG.port}/api/charts`);
        const chartsData = await chartsResponse.json();
        console.log(`‚úÖ API /api/charts retornou ${chartsData.charts.length} gr√°ficos`);

        // Listar dados via API
        const dataResponse = await fetch(`http://${TEST_CONFIG.host}:${TEST_CONFIG.port}/api/data`);
        const dataData = await dataResponse.json();
        console.log(`‚úÖ API /api/data retornou ${dataData.dataSources.length} fontes`);

        // 12. Aguardar um pouco para o monitoramento
        console.log('\n‚è≥ Aguardando 10 segundos para monitoramento...');
        await new Promise(resolve => setTimeout(resolve, 10000));

        // 13. Parar monitoramento
        console.log('\nüõë Parando monitoramento...');
        // O monitoramento para automaticamente ap√≥s a dura√ß√£o especificada

        console.log('\nüéâ Teste de tarefas complexas conclu√≠do com sucesso!');
        console.log(`\nüì± Acesse o dashboard em: http://${TEST_CONFIG.host}:${TEST_CONFIG.port}/dashboard/${dashboardResult.result.dashboardId}`);
        console.log(`üìä Visualize gr√°ficos em: http://${TEST_CONFIG.host}:${TEST_CONFIG.port}/charts/`);

        // Manter servidor rodando para inspe√ß√£o
        console.log('\n‚è∏Ô∏è Servidor mantido rodando para inspe√ß√£o...');
        console.log('Pressione Ctrl+C para parar');

    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error.message);
        console.error(error.stack);
        process.exit(1);
    }
}

async function testMCPOPNsense() {
    console.log('\nüîí Testando MCP OPNsense...\n');

    try {
        // Configura√ß√£o de teste (substitua pelos valores reais)
        const opnsenseConfig = {
            host: '192.168.1.1',
            port: 443,
            username: 'admin',
            password: 'test_password',
            useSSL: true
        };

        console.log('üîê Inicializando MCP OPNsense...');
        const mcp = new MCPOPNsense(opnsenseConfig);

        // Testar autentica√ß√£o
        console.log('üîë Testando autentica√ß√£o...');
        try {
            const authResult = await mcp.authenticate();
            console.log(`‚úÖ Autentica√ß√£o: ${authResult ? 'Sucesso' : 'Falha'}`);
        } catch (error) {
            console.log(`‚ö†Ô∏è Autentica√ß√£o falhou (esperado em ambiente de teste): ${error.message}`);
        }

        // Testar comandos MCP
        console.log('üìã Testando comandos MCP...');
        
        const commands = [
            { command: 'get_system_info', description: 'Informa√ß√µes do sistema' },
            { command: 'get_firewall_rules', description: 'Regras do firewall' },
            { command: 'get_interfaces', description: 'Interfaces de rede' },
            { command: 'get_services', description: 'Servi√ßos do sistema' }
        ];

        for (const cmd of commands) {
            try {
                console.log(`  - Testando: ${cmd.description}...`);
                const result = await mcp.executeMCPCommand(cmd.command, {});
                console.log(`    ‚úÖ ${cmd.command}: ${result.success ? 'Sucesso' : 'Falha'}`);
            } catch (error) {
                console.log(`    ‚ö†Ô∏è ${cmd.command}: Erro (esperado em ambiente de teste): ${error.message}`);
            }
        }

        console.log('\n‚úÖ Teste MCP OPNsense conclu√≠do!');

    } catch (error) {
        console.error('‚ùå Erro durante teste MCP OPNsense:', error.message);
        console.error(error.stack);
    }
}

// Fun√ß√£o principal
async function main() {
    console.log('üß™ FAZAI - Teste de Tarefas Complexas');
    console.log('=====================================\n');

    // Testar tarefas complexas
    await testComplexTasks();

    // Testar MCP OPNsense
    await testMCPOPNsense();

    console.log('\nüéØ Todos os testes conclu√≠dos!');
}

// Tratamento de sinais para limpeza
process.on('SIGINT', async () => {
    console.log('\n\nüõë Recebido sinal de interrup√ß√£o...');
    console.log('üßπ Limpando recursos...');
    
    // Aqui voc√™ pode adicionar limpeza se necess√°rio
    
    console.log('üëã Saindo...');
    process.exit(0);
});

// Executar teste
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Erro fatal:', error);
        process.exit(1);
    });
}

module.exports = {
    testComplexTasks,
    testMCPOPNsense
};