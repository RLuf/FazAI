#!/usr/bin/env node
// Lightweight Gemma worker stub (ND-JSON over UNIX socket)
const net = require('net');
const fs = require('fs');
const path = require('path');

const SOCKET = process.env.FAZAI_GEMMA_SOCKET || process.env.FAZAI_GEMMA_SOCK || '/run/fazai/gemma.sock';

function ensureDir(p) { try { fs.mkdirSync(path.dirname(p), { recursive: true }); } catch (_) {} }

ensureDir(SOCKET);
try { fs.unlinkSync(SOCKET); } catch (_) {}

const server = net.createServer((sock) => {
  let buf = '';
  function send(obj) { try { sock.write(JSON.stringify(obj) + '\n'); } catch (_) {} }
  function sendStream(obj, end=false) { try { sock.write(JSON.stringify(obj) + '\n'); if (end) sock.end(); } catch (_) {} }

  sock.on('data', (chunk) => {
    buf += chunk.toString();
    let idx;
    while ((idx = buf.indexOf('\n')) >= 0) {
      const line = buf.slice(0, idx).trim();
      buf = buf.slice(idx + 1);
      if (!line) continue;
      try {
        const msg = JSON.parse(line);
        const t = msg.type || msg.method || '';
        if (t === 'status') {
          send({ ok: true, status: 'running', model_info: { name: 'gemma-stub', version: '0.1' } });
        } else if (t === 'create_session') {
          const sid = 'sess_' + Math.floor(Math.random()*1e7);
          send({ ok: true, session_id: sid });
        } else if (t === 'generate') {
          const text = String(msg.prompt || '').slice(0, 256);
          const tokens = text.split(/\s+/).filter(Boolean).slice(0, 16);
          let i = 0;
          const timer = setInterval(() => {
            if (i < tokens.length) {
              sendStream({ type: 'token', text: tokens[i++] + ' ' });
            } else {
              clearInterval(timer);
              sendStream({ type: 'stop' }, true);
            }
          }, 20);
        } else if (t === 'abort' || t === 'close_session') {
          send({ ok: true });
        } else {
          send({ ok: false, error: 'unknown_type' });
        }
      } catch (e) {
        send({ ok: false, error: e.message });
      }
    }
  });
  sock.on('error', () => {});
});

server.listen(SOCKET, () => {
  try { fs.chmodSync(SOCKET, 0o666); } catch (_) {}
  console.log('fazai-gemma-worker stub listening on', SOCKET);
});
