FazAI – Contexto consolidado (sessão Codex 2008)

Resumo das entregas recentes (2025-08-20):

1) Instalação, serviços e estrutura
- Installer (install.sh) copia lib/tools/web/bin/mods; cria serviços:
  - fazai (daemon Node, porta 3120)
  - fazai-gemma-worker (socket /run/fazai/gemma.sock)
  - fazai-docler (non-root: fazai-web, portas 3220 cliente / 3221 admin)
  - fazai-qdrant (porta 6333), fazai-prometheus (9090), fazai-grafana (3000) via Docker/Podman, com storage persistente
- Docler server ajustado para 3220/3221; UI do daemon em /ui e /web
- Garante /var/backups/fazai e /etc/fazai/secrets/opnsense (700)

2) Configuração e telemetria
- etc/fazai/fazai.conf.example:
  - [gemma_cpp] default_model (não model), gemma é núcleo (não configurável)
  - [logging], [mcps_mode], [question_mode]
  - [telemetry] enable_ingest / enable_metrics
- Daemon: /ingest e /metrics respeitam flags; /telemetry expõe estado
- CLI: fazai telemetry --enable|--disable (edita conf + restart) e fazai telemetry-smoke (valida)
- UI: tile de status com toggles (POST /telemetry/toggle → chama CLI)

3) Gemma como núcleo
- AI_CONFIG.fixed default_provider (gemma_cpp); ignora override do conf
- Integração gemma.cpp via wrapper opt/fazai/bin/gemma_oneshot; lê defaults do conf e encaminha stdin ao binário real

4) Agente inteligente e ingestão RAG
- Rotas do agente + SSE; provider gemma-worker (socket)
- rag_ingest.js: ingestão de arquivos/URLs/texto → chunks → embeddings (OpenAI/py sentence-transformers) → Qdrant upsert
- Daemon: /kb/upload (multipart com multer), /kb/ingest; sugere via Gemma
- UI: card “Ingestão e Inferência (RAG)” com upload/URL/texto e exibição de resultados/sugestões

5) Serviços e dashboards
- /services: status para docler 3220/3221, qdrant 6333, prometheus 9090, grafana 3000
- UI: card com status + iframes Prom/Grafana

6) OPNsense multiserver (inicial)
- Registro seguro em /etc/fazai/opnsense.json e segredos em /etc/fazai/secrets/opnsense/<id>.json
- Endpoints: /opn/add, /opn/list, /opn/:id/health, /opn/:id/interfaces
- NL → plano via Gemma: /opn/nl (ações: list/add/health/interfaces) e CLI fazai opn "..."
- Diagnostics: /opn/:id/diagnostics (pass-through seguro para /api/core/diagnostics/...)
- Métricas agregadas: /opn/:id/metrics (cpu/mem/sessions/ifaces)
- UI: card OPNsense (adicionar/listar)

7) Alertas & Diagnóstico
- /etc/fazai/alerts.json com interval_sec e rules[] (por firewall)
- Daemon: GET/POST /alerts/config, scheduler periódico com avaliação e disparo de alertas
- Canais: email (mail/sendmail), telegram (bot), whatsapp (webhook); tool alerts.js atualizado
- UI: card “Alertas & Diagnóstico” (intervalo + regras como JSON por linha – em breve UI visual)

8) Backups por módulo
- Biblioteca: core/backup.js (tar.gz em /var/backups/fazai/<módulo>/)
- Triggers automáticos antes de alterações:
  - Telemetria (/telemetry/toggle) → backup de fazai.conf
  - OPNsense (/opn/add) → backup de opnsense.json + secrets
- Endpoint on-demand: POST /backup { module?, paths? }
- CLI telemetry também cria backup .bak do conf

9) CLI & Completion
- Subcomandos: opn (NL), telemetry, telemetry-smoke, check-deps (reforçado), docler start|stop|status
- Completion inclui opn e telemetry com flags
- check-deps: Docler (3220/3221), Qdrant create/upsert/search, Prometheus (9090), Grafana (3000), Docker/Podman, deps Node, logs, OPNsense list/health

10) Documentação
- README/USAGE/CHANGELOG atualizados com telemetria, Docler non-root, Qdrant, alertas, OPNsense NL/diagnostics, backups por módulo

Observações e alinhamento
- Gemma é o núcleo de inteligência do FazAI; provedores externos são complementos/fallback
- UI e CLI priorizam linguagem natural, com roteamento seguro para APIs oficiais (OPNsense)
- Próximas prioridades: UI OPNsense multiserver (tabela/tiles + tabs), endpoints rules/dns/vpn/packages, dashboards Grafana Fleet, exporter Prometheus dedicado, UI de alertas visual (não-JSON), integrações Cloudflare e SpamExperts

