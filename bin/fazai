#!/usr/bin/env node

/*
 * FazAI - Orquestrador Inteligente de Automação
 * Autor: Roger Luft
 * Licença: Creative Commons Attribution 4.0 International (CC BY 4.0)
 * https://creativecommons.org/licenses/by/4.0/
 */

/**
 * FazAI - Orquestrador Inteligente de Automação
 * CLI (Command Line Interface)
 * 
 * Este arquivo implementa a interface de linha de comando do FazAI, responsável por:
 * - Receber comandos do usuário
 * - Enviar comandos para o daemon
 * - Exibir resultados para o usuário
 */

// Verificação de dependências
let axios;
try {
  axios = require('axios');
} catch (err) {
  console.error('\x1b[31m[ERRO] Módulo axios não encontrado. Por favor, instale-o com:\x1b[0m');
  console.error('\x1b[33m  npm install -g axios\x1b[0m');
  console.error('\x1b[33m  ou\x1b[0m');
  console.error('\x1b[33m  cd /opt/fazai && npm install axios\x1b[0m');
  process.exit(1);
}

// Verificação de outras dependências críticas
let fs, path, readline, spawn;
try {
  fs = require('fs');
  path = require('path');
  readline = require('readline');
  const childProcess = require('child_process');
  spawn = childProcess.spawn;
} catch (err) {
  console.error('\x1b[31m[ERRO] Módulo Node.js básico não encontrado: ' + err.message + '\x1b[0m');
  console.error('\x1b[33m  Verifique sua instalação do Node.js\x1b[0m');
  process.exit(1);
}

// Configuração do cliente
const API_URL = process.env.FAZAI_API_URL || 'http://localhost:3000';
const LOG_FILE = '/var/log/fazai/fazai.log';

// Cores para saída no terminal
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  underscore: '\x1b[4m',
  blink: '\x1b[5m',
  reverse: '\x1b[7m',
  hidden: '\x1b[8m',
  
  fg: {
    black: '\x1b[30m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m'
  },
  
  bg: {
    black: '\x1b[40m',
    red: '\x1b[41m',
    green: '\x1b[42m',
    yellow: '\x1b[43m',
    blue: '\x1b[44m',
    magenta: '\x1b[45m',
    cyan: '\x1b[46m',
    white: '\x1b[47m'
  }
};

/**
 * Exibe mensagem de erro formatada
 * @param {string} message - Mensagem de erro
 */
function printError(message) {
  console.error(`${colors.fg.red}[ERRO] ${message}${colors.reset}`);
}

/**
 * Exibe mensagem de sucesso formatada
 * @param {string} message - Mensagem de sucesso
 */
function printSuccess(message) {
  console.log(`${colors.fg.green}[SUCESSO] ${message}${colors.reset}`);
}

/**
 * Exibe mensagem informativa formatada
 * @param {string} message - Mensagem informativa
 */
function printInfo(message) {
  console.log(`${colors.fg.cyan}[INFO] ${message}${colors.reset}`);
}

/**
 * Exibe mensagem de aviso formatada
 * @param {string} message - Mensagem de aviso
 */
function printWarning(message) {
  console.log(`${colors.fg.yellow}[AVISO] ${message}${colors.reset}`);
}

/**
 * Envia comando para o daemon
 * @param {string} command - Comando a ser enviado
 * @returns {Promise<object>} - Resposta do daemon
 */
async function sendCommand(command) {
  try {
    const response = await axios.post(`${API_URL}/command`, { command });
    return response.data;
  } catch (err) {
    if (err.response) {
      throw new Error(`Erro do servidor: ${err.response.data.error || 'Desconhecido'}`);
    } else if (err.request) {
      throw new Error('Não foi possível conectar ao daemon. Verifique se o serviço está em execução.');
    } else {
      throw new Error(`Erro ao enviar comando: ${err.message}`);
    }
  }
}

/**
 * Solicita recarga de plugins e módulos
 * @returns {Promise<object>} - Resposta do daemon
 */
async function reloadModules() {
  try {
    const response = await axios.post(`${API_URL}/reload`);
    return response.data;
  } catch (err) {
    if (err.response) {
      throw new Error(`Erro do servidor: ${err.response.data.error || 'Desconhecido'}`);
    } else if (err.request) {
      throw new Error('Não foi possível conectar ao daemon. Verifique se o serviço está em execução.');
    } else {
      throw new Error(`Erro ao recarregar módulos: ${err.message}`);
    }
  }
}

/**
 * Exibe as últimas linhas do arquivo de log
 * @param {number} lines - Número de linhas a exibir
 */
function showLogs(lines = 10) {
  try {
    if (!fs.existsSync(LOG_FILE)) {
      printError(`Arquivo de log não encontrado: ${LOG_FILE}`);
      return;
    }
    
    const logContent = fs.readFileSync(LOG_FILE, 'utf8');
    const logLines = logContent.split('\n').filter(line => line.trim() !== '');
    
    const lastLines = logLines.slice(-lines);
    
    console.log(`\n${colors.bright}${colors.fg.yellow}=== Últimas ${lines} entradas de log ===${colors.reset}\n`);
    
    lastLines.forEach(line => {
      try {
        const logEntry = JSON.parse(line);
        const timestamp = new Date(logEntry.timestamp).toLocaleString();
        const level = logEntry.level.toUpperCase();
        const message = logEntry.message;
        
        let levelColor = colors.fg.white;
        switch (level) {
          case 'ERROR':
            levelColor = colors.fg.red;
            break;
          case 'WARN':
            levelColor = colors.fg.yellow;
            break;
          case 'INFO':
            levelColor = colors.fg.green;
            break;
          case 'DEBUG':
            levelColor = colors.fg.cyan;
            break;
        }
        
        console.log(`${colors.dim}[${timestamp}]${colors.reset} ${levelColor}${level}${colors.reset}: ${message}`);
      } catch (err) {
        console.log(line);
      }
    });
    
    console.log(`\n${colors.bright}${colors.fg.yellow}=== Fim dos logs ===${colors.reset}\n`);
  } catch (err) {
    printError(`Erro ao ler logs: ${err.message}`);
  }
}

/**
 * Função principal
 */
async function main() {
  // Obtém argumentos da linha de comando
  const args = process.argv.slice(2);
  
  // Comandos especiais
  if (args.length === 0) {
    printError('Nenhum comando fornecido. Use "fazai ajuda" para ver os comandos disponíveis.');
    process.exit(1);
  }
  
  if (args[0] === 'ajuda' || args[0] === 'help') {
    console.log(`
${colors.bright}${colors.fg.cyan}FazAI - Orquestrador Inteligente de Automação${colors.reset}

${colors.bright}Uso:${colors.reset}
  fazai <comando>

${colors.bright}Comandos especiais:${colors.reset}
  ajuda, help                 Exibe esta mensagem de ajuda
  logs [n]                    Exibe as últimas n entradas de log (padrão: 10)
  reload                      Recarrega plugins e módulos
  versao, version, -v         Exibe a versão do FazAI
  check-deps, verificar-deps  Verifica dependências e instalação do sistema

${colors.bright}Comandos básicos do sistema:${colors.reset}
  kernel                      Exibe a versão do kernel (uname -r)
  sistema                     Exibe informações do sistema (uname -a)
  memoria                     Exibe informações de memória (free -h)
  disco                       Exibe informações de disco (df -h)
  processos                   Lista processos em execução (ps aux)
  rede                        Exibe informações de rede (ip a)
  data                        Exibe data e hora atual (date)
  uptime                      Exibe tempo de atividade do sistema (uptime)

${colors.bright}Exemplos:${colors.reset}
  fazai mostra os processos em execucao
  fazai cria um usuario com nome teste com a senha teste321 no grupo printers
  fazai instale os modulos mod_security do apache
    `);
    process.exit(0);
  }
  
  if (args[0] === 'logs') {
    const lines = args[1] ? parseInt(args[1], 10) : 10;
    showLogs(isNaN(lines) ? 10 : lines);
    process.exit(0);
  }
  
  if (args[0] === 'reload') {
    try {
      const result = await reloadModules();
      printSuccess('Plugins e módulos recarregados com sucesso.');
      process.exit(0);
    } catch (err) {
      printError(err.message);
      process.exit(1);
    }
  }
  
  if (args[0] === 'versao' || args[0] === 'version' || args[0] === '--version' || args[0] === '-v') {
    console.log(`FazAI v1.3.1`);
    process.exit(0);
  }
  
  // Comandos básicos do sistema que podem ser executados diretamente
  const basicCommands = {
    'kernel': 'uname -r',
    'sistema': 'uname -a',
    'memoria': 'free -h',
    'disco': 'df -h',
    'processos': 'ps aux',
    'rede': 'ip a',
    'data': 'date',
    'uptime': 'uptime'
  };
  
  if (basicCommands[args[0]]) {
    try {
      const { exec } = require('child_process');
      printInfo(`Executando comando básico: ${basicCommands[args[0]]}`);
      
      exec(basicCommands[args[0]], (error, stdout, stderr) => {
        if (error) {
          printError(`Erro ao executar comando: ${error.message}`);
          process.exit(1);
        }
        if (stderr) {
          console.error(`${colors.fg.yellow}${stderr}${colors.reset}`);
        }
        console.log(`\n${colors.bright}${colors.fg.yellow}Resultado:${colors.reset}\n${stdout}\n`);
        process.exit(0);
      });
      
      return; // Importante para evitar que o código continue enquanto o comando é executado
    } catch (err) {
      printError(`Erro ao executar comando básico: ${err.message}`);
      process.exit(1);
    }
  }
  
  if (args[0] === 'check-deps' || args[0] === 'verificar-deps') {
    printInfo("Verificando dependências do FazAI...");
    
    // Verifica dependências do Node.js
    try {
      const nodeVersion = process.version;
      printSuccess(`Node.js: ${nodeVersion}`);
      
      // Verifica versão mínima
      const versionNum = nodeVersion.substring(1); // Remove o 'v'
      const major = parseInt(versionNum.split('.')[0], 10);
      
      if (major < 14) {
        printError(`Versão do Node.js (${nodeVersion}) é menor que a mínima requerida (v14.0.0)`);
      } else {
        printSuccess("Versão do Node.js é compatível");
      }
    } catch (err) {
      printError(`Erro ao verificar versão do Node.js: ${err.message}`);
    }
    
    // Verifica dependências npm
    const dependencies = [
      { name: 'axios', version: '0.27.2' },
      { name: 'express', version: '4.18.1' },
      { name: 'winston', version: '3.8.1' },
      { name: 'ffi-napi', version: '4.0.3' }
    ];
    
    dependencies.forEach(dep => {
      try {
        const depPackage = require(`${dep.name}/package.json`);
        printSuccess(`${dep.name}: ${depPackage.version} (requerido: ${dep.version})`);
      } catch (err) {
        printError(`${dep.name}: Não encontrado ou não pode ser carregado`);
      }
    });
    
    // Verifica diretórios e arquivos
    const paths = [
      { path: '/opt/fazai', type: 'dir', desc: 'Diretório de instalação' },
      { path: '/opt/fazai/lib/main.js', type: 'file', desc: 'Arquivo principal' },
      { path: '/opt/fazai/tools', type: 'dir', desc: 'Diretório de ferramentas' },
      { path: '/opt/fazai/mods', type: 'dir', desc: 'Diretório de módulos' },
      { path: '/etc/fazai', type: 'dir', desc: 'Diretório de configuração' },
      { path: '/etc/fazai/fazai.conf', type: 'file', desc: 'Arquivo de configuração' },
      { path: '/var/log/fazai/fazai.log', type: 'file', desc: 'Arquivo de log', optional: true },
      { path: '/var/lib/fazai', type: 'dir', desc: 'Diretório de dados', optional: true }
    ];
    
    paths.forEach(item => {
      try {
        const exists = fs.existsSync(item.path);
        if (exists) {
          const stats = fs.statSync(item.path);
          if ((item.type === 'dir' && stats.isDirectory()) || 
              (item.type === 'file' && stats.isFile())) {
            printSuccess(`${item.desc} (${item.path}): OK`);
          } else {
            printError(`${item.desc} (${item.path}): Tipo incorreto`);
          }
        } else if (item.optional) {
          printInfo(`${item.desc} (${item.path}): Não encontrado (opcional)`);
        } else {
          printError(`${item.desc} (${item.path}): Não encontrado`);
        }
      } catch (err) {
        printError(`Erro ao verificar ${item.path}: ${err.message}`);
      }
    });
    
    // Verifica serviço systemd
    try {
      const systemctl = spawn('systemctl', ['status', 'fazai']);
      let output = '';
      
      systemctl.stdout.on('data', (data) => {
        output += data.toString();
      });
      
      systemctl.stderr.on('data', (data) => {
        output += data.toString();
      });
      
      systemctl.on('close', (code) => {
        if (code === 0) {
          if (output.includes('Active: active (running)')) {
            printSuccess('Serviço systemd: Ativo e em execução');
          } else if (output.includes('Active: inactive')) {
            printError('Serviço systemd: Inativo');
          } else {
            printWarning('Serviço systemd: Status desconhecido');
            console.log(output);
          }
        } else {
          printError(`Serviço systemd: Não encontrado ou erro ao verificar (código ${code})`);
        }
      });
    } catch (err) {
      printError(`Erro ao verificar serviço systemd: ${err.message}`);
    }
    
    process.exit(0);
  }
  
  // Comando normal para o FazAI
  const command = args.join(' ');
  
  try {
    printInfo(`Enviando comando: "${command}"`);
    
    const result = await sendCommand(command);
    
    if (result.success) {
      printSuccess('Comando executado com sucesso.');
      
      if (result.interpretation) {
        console.log(`\n${colors.bright}${colors.fg.yellow}Interpretação:${colors.reset} ${result.interpretation}\n`);
      }
      
      if (result.result) {
        console.log(`\n${colors.bright}${colors.fg.yellow}Resultado:${colors.reset}\n${result.result}\n`);
      }
    } else {
      printError(`Falha ao executar comando: ${result.error || 'Erro desconhecido'}`);
    }
  } catch (err) {
    printError(err.message);
    process.exit(1);
  }
}

// Executa a função principal
main().catch(err => {
  printError(`Erro não tratado: ${err.message}`);
  process.exit(1);
});
