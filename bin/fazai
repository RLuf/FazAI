#!/usr/bin/env node
// Habilita modo debug para verbose em tempo real
let debugEnabled = false;

/*
 * FazAI - Orquestrador Inteligente de Automação
 * Autor: Roger Luft
 * Licença: Creative Commons Attribution 4.0 International (CC BY 4.0)
 * https://creativecommons.org/licenses/by/4.0/
 */

/**
 * FazAI - Orquestrador Inteligente de Automação
 * CLI (Command Line Interface)
 * 
 * Este arquivo implementa a interface de linha de comando do FazAI, responsável por:
 * - Receber comandos do usuário
 * - Enviar comandos para o daemon
 * - Exibir resultados para o usuário
 */

// Verificação de dependências
let axios;
try {
  axios = require('axios');
} catch (err) {
  console.error('\x1b[31m[ERRO] Módulo axios não encontrado. Por favor, instale-o com:\x1b[0m');
  console.error('\x1b[33m  npm install -g axios\x1b[0m');
  console.error('\x1b[33m  ou\x1b[0m');
  console.error('\x1b[33m  cd /opt/fazai && npm install axios\x1b[0m');
  process.exit(1);
}

// Verificação de outras dependências críticas
let fs, path, readline, spawn;
try {
  fs = require('fs');
  path = require('path');
  readline = require('readline');
  const childProcess = require('child_process');
  spawn = childProcess.spawn;
} catch (err) {
  console.error('\x1b[31m[ERRO] Módulo Node.js básico não encontrado: ' + err.message + '\x1b[0m');
  console.error('\x1b[33m  Verifique sua instalação do Node.js\x1b[0m');
  process.exit(1);
}

// Verificação do arquivo principal
const mainJsPath = '/opt/fazai/lib/main.js';
if (!fs.existsSync(mainJsPath)) {
  console.error('\x1b[31m[ERRO] Arquivo principal não encontrado: ' + mainJsPath + '\x1b[0m');
  console.error('\x1b[33m  Verifique se o FazAI está instalado corretamente\x1b[0m');
  process.exit(1);
}

// Configuração do cliente
const API_URL = process.env.FAZAI_API_URL || 'http://localhost:3120';
const LOG_FILE = '/var/log/fazai/fazai.log';
const STREAM_URL = `${API_URL}/command/stream`;

// Cores para saída no terminal
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  underscore: '\x1b[4m',
  blink: '\x1b[5m',
  reverse: '\x1b[7m',
  hidden: '\x1b[8m',
  
  fg: {
    black: '\x1b[30m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m'
  },
  
  bg: {
    black: '\x1b[40m',
    red: '\x1b[41m',
    green: '\x1b[42m',
    yellow: '\x1b[43m',
    blue: '\x1b[44m',
    magenta: '\x1b[45m',
    cyan: '\x1b[46m',
    white: '\x1b[47m'
  }
};
/**
 * Exibe mensagem de debug se modo debug estiver ativo
 * @param {string} message - Mensagem de debug
 */
function printDebug(message) {
  if (debugEnabled) console.log(`${colors.fg.magenta}[DEBUG] ${message}${colors.reset}`);
}

/**
 * Exibe mensagem de erro formatada
 * @param {string} message - Mensagem de erro
 */
function printError(message) {
  console.error(`${colors.fg.red}[ERRO] ${message}${colors.reset}`);
}

/**
 * Exibe mensagem de sucesso formatada
 * @param {string} message - Mensagem de sucesso
 */
function printSuccess(message) {
  console.log(`${colors.fg.green}[SUCESSO] ${message}${colors.reset}`);
}

/**
 * Exibe mensagem informativa formatada
 * @param {string} message - Mensagem informativa
 */
function printInfo(message) {
  console.log(`${colors.fg.cyan}[INFO] ${message}${colors.reset}`);
}

/**
 * Exibe mensagem de aviso formatada
 * @param {string} message - Mensagem de aviso
 */
function printWarning(message) {
  console.log(`${colors.fg.yellow}[AVISO] ${message}${colors.reset}`);
}

/**
 * Envia comando para o daemon
 * @param {string} command - Comando a ser enviado
 * @returns {Promise<object>} - Resposta do daemon
 */
async function sendCommand(command) {
  // Debug: mostra detalhes da requisição
  printDebug(`[sendCommand] POST ${API_URL}/command payload: ${JSON.stringify({command})}`);
  try {
    printInfo(`Conectando ao daemon em ${API_URL}...`);
    const response = await axios.post(`${API_URL}/command`, { command }, {
      timeout: 30000 // 30 segundos de timeout
    });
    // Debug: mostra detalhes da resposta HTTP
    printDebug(`[sendCommand] HTTP ${response.status} ${response.statusText}`);
    printDebug(`[sendCommand] response.data: ${JSON.stringify(response.data)}`);
    
    if (!response.data.success) {
      if (response.data.error) {
        throw new Error(response.data.error);
      } else if (response.data.interpretation) {
        printWarning(`O comando foi interpretado, mas a execução falhou: ${response.data.interpretation}`);
        if (response.data.details) {
          printError(`Detalhes do erro: ${response.data.details}`);
        }
        return response.data;
      } else {
        throw new Error('Resposta do servidor indica falha, mas sem detalhes específicos');
      }
    }
    
    return response.data;
  } catch (err) {
    if (err.response) {
      // Erro com resposta do servidor
      const errorData = err.response.data;
      if (errorData && errorData.error) {
        throw new Error(`Erro do servidor: ${errorData.error}`);
      } else if (errorData && errorData.details) {
        throw new Error(`Erro do servidor: ${errorData.details}`);
      } else {
        throw new Error(`Erro do servidor: ${err.response.status} ${err.response.statusText}`);
      }
    } else if (err.request) {
      // Erro sem resposta (problema de conexão)
      throw new Error(`Não foi possível conectar ao daemon. Verifique se o serviço está em execução em ${API_URL}.`);
    } else {
      // Erro na configuração da requisição
      throw new Error(`Erro ao enviar comando: ${err.message}`);
    }
  }
}

/**
 * Conecta ao endpoint SSE e imprime eventos em tempo real
 * @param {{command: string, mcps?: boolean, cwd?: string, question?: boolean}} body
 */
async function streamToConsole(body) {
  const http = require('http');
  const https = require('https');
  const url = require('url');
  const parsed = url.parse(STREAM_URL);
  const isHttps = parsed.protocol === 'https:';
  const lib = isHttps ? https : http;

  const payload = JSON.stringify(body);
  const options = {
    method: 'POST',
    hostname: parsed.hostname,
    port: parsed.port || (isHttps ? 443 : 80),
    path: parsed.path,
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(payload)
    }
  };

  printInfo(`Conectando (SSE) a ${STREAM_URL}...`);
  await new Promise((resolve, reject) => {
    const req = lib.request(options, (res) => {
      if (res.statusCode < 200 || res.statusCode >= 300) {
        reject(new Error(`Status HTTP ${res.statusCode}`));
        return;
      }

      res.setEncoding('utf8');
      let buffer = '';

      const flushBuffer = () => {
        const lines = buffer.split('\n');
        buffer = lines.pop();
        for (const line of lines) {
          if (line.startsWith('event:')) {
            // armazenado até próximo data
            streamToConsole._currentEvent = line.slice(6).trim();
          } else if (line.startsWith('data:')) {
            const ev = (streamToConsole._currentEvent || 'message');
            const raw = line.slice(5).trim();
            let data;
            try { data = JSON.parse(raw); } catch { data = { text: raw }; }
            renderSseEvent(ev, data);
          }
        }
      };

      res.on('data', (chunk) => { buffer += chunk; flushBuffer(); });
      res.on('end', () => { flushBuffer(); resolve(); });
    });
    req.on('error', reject);
    req.write(payload);
    req.end();
  });
}

function renderSseEvent(event, data) {
  switch (event) {
    case 'received':
      printInfo(`Recebido pelo daemon: "${data.command}" (mcps=${!!data.mcps})`);
      break;
    case 'phase':
      printInfo(`Fase: ${data.phase}`);
      break;
    case 'interpretation':
      if (data.interpretation) {
        console.log(`\n${colors.bright}${colors.fg.yellow}Interpretação:${colors.reset} ${data.interpretation}\n`);
      }
      break;
    case 'stdout':
      process.stdout.write(data.chunk);
      break;
    case 'stderr':
      process.stderr.write(`${colors.fg.yellow}${data.chunk}${colors.reset}`);
      break;
    case 'steps':
      if (Array.isArray(data.steps)) {
        printInfo(`MCPS: ${data.steps.length} passos gerados`);
      }
      break;
    case 'step_start':
      console.log(`\n${colors.bright}${colors.fg.cyan}Iniciando passo ${data.index + 1}:${colors.reset} ${data.command}`);
      break;
    case 'step_stdout':
      process.stdout.write(data.chunk);
      break;
    case 'step_stderr':
      process.stderr.write(`${colors.fg.yellow}${data.chunk}${colors.reset}`);
      break;
    case 'step_end':
      const status = data.code === 0 ? `${colors.fg.green}OK${colors.reset}` : `${colors.fg.red}FAIL (code ${data.code})${colors.reset}`;
      console.log(`\n${colors.bright}Passo ${data.index + 1} finalizado:${colors.reset} ${status}`);
      break;
    case 'plan_results':
      printInfo('Plano arquitetado executado.');
      break;
    case 'interactive':
      printWarning('Interação requerida pelo plano. Abra a interface apropriada.');
      break;
    case 'answer':
      console.log(`\n${colors.bright}${colors.fg.yellow}Resposta:${colors.reset}\n${data.answer}\n`);
      break;
    case 'exit':
      // apenas informativo
      break;
    case 'done':
      printSuccess(`Concluído (success=${data.success})`);
      break;
    case 'error':
      printError(data.message || 'Erro');
      break;
    default:
      if (data?.text) console.log(data.text);
  }
}

/**
 * Envia comando para o daemon no modo MCPS
 * @param {string} command - Comando a ser enviado
 * @returns {Promise<object>} - Resposta do daemon
 */
async function sendCommandMcps(command) {
  // Debug: mostra detalhes da requisição MCPS
  printDebug(`[sendCommandMcps] POST ${API_URL}/command payload: ${JSON.stringify({command, mcps: true})}`);
  try {
    printInfo(`Conectando ao daemon em ${API_URL} (MCPS)...`);
    const response = await axios.post(`${API_URL}/command`, { command, mcps: true }, {
      timeout: 30000 // 30 segundos de timeout
    });
    // Debug: mostra detalhes da resposta MCPS
    printDebug(`[sendCommandMcps] HTTP ${response.status} ${response.statusText}`);
    printDebug(`[sendCommandMcps] response.data: ${JSON.stringify(response.data)}`);

    if (!response.data.success) {
      if (response.data.error) {
        throw new Error(response.data.error);
      } else if (response.data.interpretation) {
        printWarning(`O comando foi interpretado, mas a execução falhou: ${response.data.interpretation}`);
        if (response.data.details) {
          printError(`Detalhes do erro: ${response.data.details}`);
        }
        return response.data;
      } else {
        throw new Error('Resposta do servidor indica falha, mas sem detalhes específicos');
      }
    }

    return response.data;
  } catch (err) {
    if (err.response) {
      const errorData = err.response.data;
      if (errorData && errorData.error) {
        throw new Error(`Erro do servidor: ${errorData.error}`);
      } else if (errorData && errorData.details) {
        throw new Error(`Erro do servidor: ${errorData.details}`);
      } else {
        throw new Error(`Erro do servidor: ${err.response.status} ${err.response.statusText}`);
      }
    } else if (err.request) {
      throw new Error(`Não foi possível conectar ao daemon. Verifique se o serviço está em execução em ${API_URL}.`);
    } else {
      throw new Error(`Erro ao enviar comando: ${err.message}`);
    }
  }
}

/**
 * Solicita recarga de plugins e módulos
 * @returns {Promise<object>} - Resposta do daemon
 */
async function reloadModules() {
  try {
    const response = await axios.post(`${API_URL}/reload`);
    return response.data;
  } catch (err) {
    if (err.response) {
      throw new Error(`Erro do servidor: ${err.response.data.error || 'Desconhecido'}`);
    } else if (err.request) {
      throw new Error('Não foi possível conectar ao daemon. Verifique se o serviço está em execução.');
    } else {
      throw new Error(`Erro ao recarregar módulos: ${err.message}`);
    }
  }
}

/**
 * Executa comando systemctl para o serviço FazAI
 * @param {string} action - start | stop | restart | status
 */
function systemctlCommand(action) {
  const { spawnSync } = require('child_process');
  printInfo(`Executando systemctl ${action} fazai...`);
  const result = spawnSync('systemctl', [action, 'fazai'], { encoding: 'utf8' });
  if (result.stdout) console.log(result.stdout.trim());
  if (result.stderr) console.error(result.stderr.trim());
  return result.status === 0;
}

/**
 * Exibe as últimas linhas do arquivo de log
 * @param {number} lines - Número de linhas a exibir
 */
function showLogs(lines = 10) {
  try {
    if (!fs.existsSync(LOG_FILE)) {
      printError(`Arquivo de log não encontrado: ${LOG_FILE}`);
      return;
    }
    
    const logContent = fs.readFileSync(LOG_FILE, 'utf8');
    const logLines = logContent.split('\n').filter(line => line.trim() !== '');
    
    const lastLines = logLines.slice(-lines);
    
    console.log(`\n${colors.bright}${colors.fg.yellow}=== Últimas ${lines} entradas de log ===${colors.reset}\n`);
    
    lastLines.forEach(line => {
      try {
        const logEntry = JSON.parse(line);
        const timestamp = new Date(logEntry.timestamp).toLocaleString();
        const level = logEntry.level.toUpperCase();
        const message = logEntry.message;
        
        let levelColor = colors.fg.white;
        switch (level) {
          case 'ERROR':
            levelColor = colors.fg.red;
            break;
          case 'WARN':
            levelColor = colors.fg.yellow;
            break;
          case 'INFO':
            levelColor = colors.fg.green;
            break;
          case 'DEBUG':
            levelColor = colors.fg.cyan;
            break;
        }
        
        console.log(`${colors.dim}[${timestamp}]${colors.reset} ${levelColor}${level}${colors.reset}: ${message}`);
      } catch (err) {
        console.log(line);
      }
    });
    
    console.log(`\n${colors.bright}${colors.fg.yellow}=== Fim dos logs ===${colors.reset}\n`);
  } catch (err) {
    printError(`Erro ao ler logs: ${err.message}`);
  }
}

/**
 * Limpa o arquivo de log
 */
async function clearLogs() {
  try {
    printInfo('Limpando logs do FazAI...');
    
    const response = await axios.post(`${API_URL}/logs/clear`);
    
    if (response.data.success) {
      printSuccess('Logs limpos com sucesso!');
      if (response.data.backup) {
        printInfo(`Backup criado em: ${response.data.backup}`);
      }
    } else {
      printError(`Erro ao limpar logs: ${response.data.error}`);
    }
  } catch (err) {
    if (err.response) {
      printError(`Erro do servidor: ${err.response.data.error || 'Desconhecido'}`);
    } else if (err.request) {
      printError('Não foi possível conectar ao daemon. Verifique se o serviço está em execução.');
    } else {
      printError(`Erro ao limpar logs: ${err.message}`);
    }
  }
}

/**
 * Função principal
 */
async function main() {
  // Obtém argumentos da linha de comando
  const args = process.argv.slice(2);
  // Verifica flag de debug (-d ou --debug)
  if (args[0] === '-d' || args[0] === '--debug') {
    debugEnabled = true;
    printInfo('Modo debug ativado');
    args.shift();
  }
  // Flag de streaming (--stream|-s)
  let streamEnabled = false;
  if (args[0] === '--stream' || args[0] === '-s') {
    streamEnabled = true;
    args.shift();
  }
  
  // Flag pergunta direta (-q)
  let questionMode = false;
  if (args[0] === '-q' || args[0] === '--question') {
    questionMode = true;
    args.shift();
  }

  // Comandos especiais
  if (args.length === 0) {
    printError('Nenhum comando fornecido. Use "fazai ajuda" para ver os comandos disponíveis.');
    process.exit(1);
  }
  
  if (args[0] === 'ajuda' || args[0] === 'help' || args[0] === '--help') {
    console.log(`
${colors.bright}${colors.fg.cyan}FazAI - Orquestrador Inteligente de Automação v1.42.0${colors.reset}

${colors.bright}Compatível com:${colors.reset}
  • Debian/Ubuntu
  • Fedora/RedHat/CentOS
  • WSL (Debian/Ubuntu)

${colors.bright}Uso:${colors.reset}
  fazai [-d|--debug] [--stream|-s] [-q] <comando>

${colors.bright}Comandos de Sistema:${colors.reset}
  ajuda, help, --help         Exibe esta mensagem de ajuda
  -d, --debug                 Ativa modo debug com verbose em tempo real
  versao, version, -v         Exibe a versão do FazAI
  -q, --question              Pergunta direta (sem executar comandos)
  check-deps, verificar-deps  Verifica dependências e instalação do sistema

${colors.bright}Comandos de Serviço:${colors.reset}
  start                       Inicia o serviço FazAI
  stop                        Para o serviço FazAI
  restart                     Reinicia o serviço FazAI
  status                      Mostra o status do serviço FazAI
  reload                      Recarrega plugins e módulos

${colors.bright}Comandos de Logs:${colors.reset}
  logs [n]                    Exibe as últimas n entradas de log (padrão: 10)
  limpar-logs, clear-logs     Limpa o arquivo de log (cria backup)
  web                         Abre a interface web de gerenciamento

${colors.bright}Comandos de Sistema Rápido:${colors.reset}
  kernel                      Exibe versão do kernel (uname -r)
  sistema                     Exibe informações do sistema (uname -a)
  memoria                     Exibe uso de memória (free -h)
  disco                       Exibe uso de disco (df -h)
  processos                   Lista processos (ps aux)
  rede                        Exibe interfaces de rede (ip a)
  data                        Mostra data e hora (date)
  uptime                      Tempo de atividade (uptime)

${colors.bright}Comandos de Visualização:${colors.reset}
  html <tipo> [graf]          Gera gráfico HTML (tipo: memoria, disco, processos)
  tui                         Abre o dashboard TUI (ncurses)
  interactive                 Abre sessão interativa (WebSocket PTY)

${colors.bright}Comandos de Configuração:${colors.reset}
  config                      Abre ferramenta de configuração interativa
  cache                       Mostra status do cache de IA
  cache-clear                 Limpa o cache de IA

${colors.bright}Modo MCPS (Planejamento Passo a Passo):${colors.reset}
  mcps <tarefa>               Exemplo: fazai mcps atualizar o sistema
  mcps --stream <tarefa>      Executa MCPS com saída em tempo real

${colors.bright}Provedores de IA Suportados:${colors.reset}
  • OpenRouter (padrão)       - Múltiplos modelos via OpenRouter
  • OpenAI                    - GPT-4, GPT-3.5-turbo
  • Anthropic (Claude)        - Claude 3 Opus, Sonnet, Haiku
  • Google Gemini             - Gemini Pro, Pro Vision
  • Requesty                  - Gateway para múltiplos provedores
  • Ollama                    - Modelos locais (llama3.2, mixtral, etc.)

${colors.bright}Sistema de Fallback:${colors.reset}
  O FazAI automaticamente tenta o próximo provedor em caso de falha:
  Gemma (local) → Llama server → OpenRouter → Requesty → OpenAI → Anthropic → Gemini → Ollama

${colors.bright}Exemplo de instalação Fedora:${colors.reset}
  sudo dnf install -y nodejs npm python3 python3-pip gcc dialog
  sudo ./install.sh

${colors.bright}Exemplos de Uso:${colors.reset}
  fazai mostra os processos em execucao
  fazai cria um usuario com nome teste com a senha teste321 no grupo printers
  fazai instale os modulos mod_security do apache
  fazai altere a porta do ssh de 22 para 31052
  fazai mcps atualizar sistema
  fazai config                 # Configurar provedores de IA
  fazai cache                  # Verificar status do cache

${colors.bright}Para mais informações:${colors.reset}
  • Documentação: README.md, USAGE.md
  • Logs: /var/log/fazai/fazai.log
  • Configuração: /etc/fazai/fazai.conf
  • GitHub: https://github.com/RLuf/FazAI
    `);
    process.exit(0);
  }
  
  if (args[0] === 'logs') {
    const lines = args[1] ? parseInt(args[1], 10) : 10;
    showLogs(isNaN(lines) ? 10 : lines);
    process.exit(0);
  }
  
  if (args[0] === 'limpar-logs' || args[0] === 'clear-logs') {
    clearLogs();
    process.exit(0);
  }
  
  if (args[0] === 'reload') {
    try {
      const result = await reloadModules();
      printSuccess('Plugins e módulos recarregados com sucesso.');
      process.exit(0);
    } catch (err) {
      printError(err.message);
      process.exit(1);
    }
  }
  
  if (args[0] === 'versao' || args[0] === 'version' || args[0] === '--version' || args[0] === '-v') {
    console.log(`FazAI v1.42.0`);
    process.exit(0);
  }

  if (['start', 'stop', 'restart', 'status'].includes(args[0])) {
    const ok = systemctlCommand(args[0]);
    process.exit(ok ? 0 : 1);
  }

  // Comandos de cache
  if (args[0] === 'cache') {
    try {
      const response = await axios.get(`${API_URL}/cache`);
      console.log(`\n${colors.bright}${colors.fg.cyan}=== Status do Cache ===${colors.reset}`);
      console.log(`Tamanho atual: ${response.data.size}/${response.data.maxSize} entradas`);
      console.log(`TTL: ${response.data.ttl} segundos`);
      console.log(`Hit rate estimado: ${response.data.size > 0 ? 'Ativo' : 'Vazio'}`);
      console.log(`${colors.bright}${colors.fg.cyan}=====================${colors.reset}\n`);
      process.exit(0);
    } catch (err) {
      printError(`Erro ao verificar cache: ${err.message}`);
      process.exit(1);
    }
  }

  if (args[0] === 'cache-clear') {
    try {
      const response = await axios.delete(`${API_URL}/cache`);
      printSuccess('Cache limpo com sucesso!');
      process.exit(0);
    } catch (err) {
      printError(`Erro ao limpar cache: ${err.message}`);
      process.exit(1);
    }
  }

  // Comando de configuração
  if (args[0] === 'config') {
    const config_tool = '/opt/fazai/tools/fazai-config.js';
    
    if (!fs.existsSync(config_tool)) {
      printError('Ferramenta de configuração não encontrada');
      process.exit(1);
    }

    const { exec } = require('child_process');
    printInfo('Iniciando ferramenta de configuração...');
    
    exec(`node ${config_tool}`, (error, stdout, stderr) => {
      if (error) {
        printError(`Erro ao executar ferramenta de configuração: ${error.message}`);
        process.exit(1);
      }
      if (stderr) {
        console.error(`${colors.fg.yellow}${stderr}${colors.reset}`);
      }
      console.log(`${stdout}`);
      process.exit(0);
    });
  }
  
  // Comandos básicos do sistema que podem ser executados diretamente
  const basicCommands = {
    'kernel': 'uname -r',
    'sistema': 'uname -a',
    'memoria': 'free -h',
    'disco': 'df -h',
    'processos': 'ps aux',
    'rede': 'ip a',
    'data': 'date',
    'uptime': 'uptime',
    'html': 'fazai_html_v1.sh',  // Adiciona comando html como invocação direta
    'web': 'fazai_web.sh',       // Adiciona comando web para interface web
    'tui': 'fazai_tui.sh'        // Adiciona comando tui para dashboard TUI
  };
  
  if (basicCommands[args[0]] || args[0] === 'interactive') {
    try {
      // Se o comando for 'html', executa o script com parâmetros
      if (args[0] === 'html') {
        const script_path = '/opt/fazai/tools/fazai_html_v1.sh';
        const data_type = args[1] || 'memoria';
        const chart_type = args[2] || 'bar';
        
        // Executa o script de geração HTML
        const { exec } = require('child_process');
        printInfo(`Gerando visualização HTML para ${data_type} com gráfico ${chart_type}`);
        
        exec(`chmod +x ${script_path} && ${script_path} ${data_type} ${chart_type}`, (error, stdout, stderr) => {
          if (error) {
            printError(`Erro ao executar script HTML: ${error.message}`);
            process.exit(1);
          }
          if (stderr) {
            console.error(`${colors.fg.yellow}${stderr}${colors.reset}`);
          }
          console.log(`\n${colors.bright}${colors.fg.yellow}Resultado:${colors.reset}\n${stdout}\n`);
          process.exit(0);
        });
      } else if (args[0] === 'web') {
        // Se o comando for 'web', executa o script da interface web
        const script_path = '/opt/fazai/tools/fazai_web.sh';
        
        const { exec } = require('child_process');
        printInfo('Iniciando interface web do FazAI...');
        
        exec(`chmod +x ${script_path} && ${script_path}`, (error, stdout, stderr) => {
          if (error) {
            printError(`Erro ao executar interface web: ${error.message}`);
            process.exit(1);
          }
          if (stderr) {
            console.error(`${colors.fg.yellow}${stderr}${colors.reset}`);
          }
          console.log(`\n${colors.bright}${colors.fg.yellow}${stdout}${colors.reset}\n`);
          process.exit(0);
        });
      } else if (args[0] === 'tui') {
        // Se o comando for 'tui', executa o dashboard TUI
        const script_path = '/opt/fazai/tools/fazai-tui.sh';
        
        const { exec } = require('child_process');
        printInfo('Iniciando dashboard TUI do FazAI...');
        
        exec(`chmod +x ${script_path} && ${script_path}`, (error, stdout, stderr) => {
          if (error) {
            printError(`Erro ao executar dashboard TUI: ${error.message}`);
            process.exit(1);
          }
          if (stderr) {
            console.error(`${colors.fg.yellow}${stderr}${colors.reset}`);
          }
          console.log(`\n${colors.bright}${colors.fg.yellow}${stdout}${colors.reset}\n`);
          process.exit(0);
        });
      } else if (args[0] === 'interactive') {
        const WebSocket = require('ws');
        const wsUrl = (process.env.FAZAI_WS_URL || API_URL.replace('http', 'ws')) + '/ws/interactive';
        printInfo(`Conectando WS: ${wsUrl}`);
        const ws = new WebSocket(wsUrl);
        ws.on('open', () => {
          printInfo('Sessão interativa aberta. Ctrl+C para sair.');
          if (process.stdin.setRawMode) process.stdin.setRawMode(true);
          process.stdin.resume();
          process.stdin.on('data', (chunk) => {
            if (chunk.length === 1 && chunk[0] === 3) { try { ws.close(); } catch(_) {}; process.exit(0); }
            ws.send(JSON.stringify({ type: 'stdin', data: chunk.toString('utf8') }));
          });
        });
        ws.on('message', (msg) => {
          try { const m = JSON.parse(msg.toString()); if (m.type === 'stdout' && m.data) process.stdout.write(m.data); } catch(_) {}
        });
        ws.on('close', () => { printInfo('Sessão encerrada'); process.exit(0); });
        ws.on('error', (e) => { printError(`WS erro: ${e.message}`); process.exit(1); });
      } else {
        // Para outros comandos básicos
        const { exec } = require('child_process');
        printInfo(`Executando comando básico: ${basicCommands[args[0]]}`);
        
        exec(basicCommands[args[0]], (error, stdout, stderr) => {
          if (error) {
            printError(`Erro ao executar comando: ${error.message}`);
            process.exit(1);
          }
          if (stderr) {
            console.error(`${colors.fg.yellow}${stderr}${colors.reset}`);
          }
          console.log(`\n${colors.bright}${colors.fg.yellow}Resultado:${colors.reset}\n${stdout}\n`);
          process.exit(0);
        });
      }
    } catch (err) {
      printError(`Erro ao executar comando básico: ${err.message}`);
      process.exit(1);
    }
  }
  
  if (args[0] === 'check-deps' || args[0] === 'verificar-deps') {
    printInfo("Verificando dependências do FazAI...");
    
    // Verifica dependências do Node.js
    try {
      const nodeVersion = process.version;
      printSuccess(`Node.js: ${nodeVersion}`);
      
      // Verifica versão mínima
      const versionNum = nodeVersion.substring(1); // Remove o 'v'
      const major = parseInt(versionNum.split('.')[0], 10);
      
      if (major < 18) {
        printError(`Versão do Node.js (${nodeVersion}) é menor que a mínima requerida (v18.0.0)`);
      } else {
        printSuccess("Versão do Node.js é compatível");
      }
    } catch (err) {
      printError(`Erro ao verificar versão do Node.js: ${err.message}`);
    }
    
    // Verifica arquivo principal
    try {
      if (fs.existsSync('/opt/fazai/lib/main.js')) {
        printSuccess('Arquivo principal: Encontrado em /opt/fazai/lib/main.js');
      } else {
        printError('Arquivo principal: Não encontrado');
      }
    } catch (err) {
      printError(`Erro ao verificar arquivo principal: ${err.message}`);
    }
    
    // Verifica dependências npm
    const dependencies = [
      { name: 'axios', version: '0.27.2' },
      { name: 'express', version: '4.18.1' },
      { name: 'winston', version: '3.8.1' },
      { name: 'ffi-napi-v22', version: '0.0.1' }
    ];
    
    dependencies.forEach(dep => {
      try {
        const depPackage = require(`${dep.name}/package.json`);
        printSuccess(`${dep.name}: ${depPackage.version} (requerido: ${dep.version})`);
      } catch (err) {
        printError(`${dep.name}: Não encontrado ou não pode ser carregado`);
      }
    });
    
    // Verifica diretórios e arquivos
    const paths = [
      { path: '/opt/fazai', type: 'dir', desc: 'Diretório de instalação' },
      { path: '/opt/fazai/lib/main.js', type: 'file', desc: 'Arquivo principal' },
      { path: '/opt/fazai/tools', type: 'dir', desc: 'Diretório de ferramentas' },
      { path: '/opt/fazai/mods', type: 'dir', desc: 'Diretório de módulos' },
      { path: '/etc/fazai', type: 'dir', desc: 'Diretório de configuração' },
      { path: '/etc/fazai/fazai.conf', type: 'file', desc: 'Arquivo de configuração' },
      { path: '/var/log/fazai/fazai.log', type: 'file', desc: 'Arquivo de log', optional: true },
      { path: '/var/lib/fazai', type: 'dir', desc: 'Diretório de dados', optional: true }
    ];
    
    paths.forEach(item => {
      try {
        const exists = fs.existsSync(item.path);
        if (exists) {
          const stats = fs.statSync(item.path);
          if ((item.type === 'dir' && stats.isDirectory()) || 
              (item.type === 'file' && stats.isFile())) {
            printSuccess(`${item.desc} (${item.path}): OK`);
          } else {
            printError(`${item.desc} (${item.path}): Tipo incorreto`);
          }
        } else if (item.optional) {
          printInfo(`${item.desc} (${item.path}): Não encontrado (opcional)`);
        } else {
          printError(`${item.desc} (${item.path}): Não encontrado`);
        }
      } catch (err) {
        printError(`Erro ao verificar ${item.path}: ${err.message}`);
      }
    });
    
    // Verifica serviço systemd
    try {
      const systemctl = spawn('systemctl', ['status', 'fazai']);
      let output = '';
      
      systemctl.stdout.on('data', (data) => {
        output += data.toString();
      });
      
      systemctl.stderr.on('data', (data) => {
        output += data.toString();
      });
      
      systemctl.on('close', (code) => {
        if (code === 0) {
          if (output.includes('Active: active (running)')) {
            printSuccess('Serviço systemd: Ativo e em execução');
          } else if (output.includes('Active: inactive')) {
            printError('Serviço systemd: Inativo');
          } else {
            printWarning('Serviço systemd: Status desconhecido');
            console.log(output);
          }
        } else {
          printError(`Serviço systemd: Não encontrado ou erro ao verificar (código ${code})`);
        }
      });
    } catch (err) {
      printError(`Erro ao verificar serviço systemd: ${err.message}`);
    }
    
    process.exit(0);
  }
  
  // Modo MCPS - planejamento passo a passo
  if (args[0] === 'mcps') {
    const mcpsCommand = args.slice(1).join(' ');
    if (!mcpsCommand) {
      printError('Nenhum comando fornecido para o modo MCPS.');
      process.exit(1);
    }

    try {
      printInfo(`Enviando comando MCPS${streamEnabled ? ' (stream)' : ''}: "${mcpsCommand}"`);
      if (streamEnabled) {
        await streamToConsole({ command: mcpsCommand, mcps: true });
        process.exit(0);
      }
      const result = await sendCommandMcps(mcpsCommand);

      if (result.success) {
        printSuccess('MCPS executado com sucesso.');

        if (result.steps) {
          result.steps.forEach((step, idx) => {
            console.log(`\n${colors.bright}${colors.fg.yellow}Passo ${idx + 1}:${colors.reset} ${step.command}\n${step.output}\n`);
          });
        }
      } else {
        printError(`Falha no MCPS: ${result.error || 'Erro desconhecido'}`);
      }
    } catch (err) {
      printError(err.message);
      process.exit(1);
    }

    process.exit(0);
  }

  // Comando normal para o FazAI
  const command = args.join(' ');
  
  try {
    printInfo(`Enviando comando${streamEnabled ? ' (stream)' : ''}${questionMode ? ' (question)' : ''}: "${command}"`);
    if (streamEnabled) {
      await streamToConsole({ command, question: questionMode });
      process.exit(0);
    }
    const result = await sendCommand(questionMode ? { question: true, command } : command);
    
    if (result.success) {
      printSuccess('Comando executado com sucesso.');
      
      if (result.interpretation) {
        console.log(`\n${colors.bright}${colors.fg.yellow}Interpretação:${colors.reset} ${result.interpretation}\n`);
      }
      
      if (result.result) {
        console.log(`\n${colors.bright}${colors.fg.yellow}Resultado:${colors.reset}\n${result.result}\n`);
      }
    } else {
      if (result.interpretation) {
        console.log(`\n${colors.bright}${colors.fg.yellow}Interpretação:${colors.reset} ${result.interpretation}\n`);
      }
      
      printError(`Falha ao executar comando: ${result.error || 'Erro desconhecido'}`);
      
      if (result.details) {
        printInfo(`Detalhes técnicos: ${result.details}`);
      }
      
      // Sugestões para problemas comuns
      if (result.error && result.error.includes('API')) {
        printInfo('Sugestão: Verifique se as chaves de API estão configuradas corretamente no arquivo .env ou /etc/fazai/fazai.conf');
      } else if (result.error && (result.error.includes('conectar') || result.error.includes('conexão'))) {
        printInfo('Sugestão: Verifique se o daemon está em execução com "systemctl status fazai" ou inicie-o com "systemctl start fazai"');
      }
    }
  } catch (err) {
    printError(err.message);
    
    // Sugestões para erros comuns
    if (err.message.includes('conectar') || err.message.includes('ECONNREFUSED')) {
      printInfo('Sugestão: O daemon FazAI parece não estar em execução. Tente iniciar o serviço com:');
      console.log(`${colors.fg.cyan}  sudo systemctl start fazai${colors.reset}`);
      printInfo('Para verificar o status do serviço, use:');
      console.log(`${colors.fg.cyan}  sudo systemctl status fazai${colors.reset}`);
    } else if (err.message.includes('timeout')) {
      printInfo('Sugestão: A conexão com o daemon expirou. Isso pode ocorrer se:');
      console.log(`${colors.fg.cyan}  1. O daemon está sobrecarregado${colors.reset}`);
      console.log(`${colors.fg.cyan}  2. A conexão com o provedor de IA está lenta${colors.reset}`);
      console.log(`${colors.fg.cyan}  3. O comando é muito complexo e está demorando para ser processado${colors.reset}`);
    }
    
    process.exit(1);
  }
}

// Executa a função principal
main().catch(err => {
  printError(`Erro não tratado: ${err.message}`);
  process.exit(1);
});
